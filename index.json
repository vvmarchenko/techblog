[{"content":"Introduction Hello everyone!üëã I\u0026rsquo;m pleased to have your attention! Every day, as I delve deeper into the DevOps methodology, I see more and more discrepancies and misunderstandings about what DevOps is and why it is needed.\nIn this article, I will try to share the information that I have learned and found about this issue, and I hope it will be helpful to you.\nSo let\u0026rsquo;s get started!üöÄ\nHistory of DevOps To answer the question \u0026ldquo;What is DevOps?\u0026rdquo;, let\u0026rsquo;s first understand where this methodology came from: The DevOps methodology started to coalesce sometime between 2007 and 2008, when IT operations and software development communities raised concerns what they felt was a fatal level of dysfunction in the industry.\nThey railed against the traditional software development model, which called for those who write code to be organizationally and functionally apart from those who deploy and support that code.\nAt this very moment, by fortunate circumstances, Patrick Debois appears. Patrick Debois first suggested the DevOps philosophy in 2007. When consulting as a project manager for the Belgian government ministry\u0026rsquo;s task of data center migrations. Patrick was visibly frustrated with the \u0026ldquo;walls of separation\u0026rdquo; and lack of collaboration between the application development teams and infrastructure teams.\nIn 2008, Patrick learned about the \u0026ldquo;Agile Infrastructure\u0026rdquo; session hosted by Andrew Schafer at the Agile Conference in Toronto. Unfortunately, given the negative predilection around the topic, Patrick was the only one at the session. Nevertheless, they both shared their ideas and seemed to hit it off instantly. They then discussed \u0026ldquo;Agile Systems Administration\u0026rdquo; on an online forum. The idea was met with lackluster interest.\nIn an unrelated turn of events, this idea resurfaced at the 2009 O\u0026rsquo;Reilly Velocity Conference when two Flickr employees - John Allspaw and Paul Hammond, gave the fabulous presentation titled, \u0026ldquo;10+ Deploys per Day: Dev and Ops Cooperation at Flickr.\u0026rdquo; Allspaw and Hammond role-played conversations between members of development and operations teams during a standard software deployment cycle. In addition, they offered dramatic representation to the finger-pointing that goes along, including \u0026ldquo;It\u0026rsquo;s not my code, it\u0026rsquo;s your machines!\u0026rdquo;\nWhile Patrick Debois wasn\u0026rsquo;t at the presentation, he watched the recording. And given the sudden buzz on social media went on to coin the term \u0026ldquo;DevOps\u0026rdquo; in the year 2009.\nSo what is DevOps? At its core, DevOps is a culture that emphasizes the need for collaboration and communication between software development teams and IT operations.\nThe primary goal of DevOps is to enable organizations to deliver software products and services quickly, reliably, and at scale. It involves a combination of tools, practices, and cultural changes to achieve this goal.\nThe goals of DevOps: Fast Development Methodologies Fast Quality Assurance Methodologies Fast Deployment Methodologies Faster time to market Iteration \u0026amp; Continuous Feedback (strong and continuous communication between stakeholders ‚Äî the end users and customers, product owners, development, quality assurance, and production engineers) The benefits of DevOps: Environment Stabilization (enforces consistency, increase up-time) Shorter Development Cycle (manage requirements and code-repository) Increased Release Velocity (continuous build, push-button deployments) Reduced Defects (regiment processes, automated testing) Process Metrics (track both time at each stage, and the errors and exceptions) Also, I cannot overlook one of the most important practices in DevOps, which is Continuous Integration and Continuous Delivery (CI/CD).\nContinuous integration and continuous delivery (CI/CD) Continuous Integration (CI) is the practice used by development teams to automate, merge, and test code. CI helps to catch bugs early in the development cycle, which makes them less expensive to fix. Automated tests execute as part of the CI process to ensure quality. CI systems produce artifacts and feed them to release processes to drive frequent deployments.\nContinuous Delivery (CD) is a process by which code is built, tested, and deployed to one or more test and production environments. Deploying and testing in multiple environments increases quality. CD systems produce deployable artifacts, including infrastructure and apps. Automated release processes consume these artifacts to release new versions and fixes to existing systems. Systems that monitor and send alerts run continually to drive visibility into the entire CD process.\nBased on the above, I can identify the main steps in DevOps:\nThe Steps of DevOps: Plan: task management, schedules Code: code development and code review, source code management Build: continuous integration tools, version control tools, build status Test: continuous testing tools that provide feedback on business risks, determine performance Package: artifact repository, application pre-deployment staging Release: change management, release approvals, release automation Operate: infrastructure installation, infrastructure changes (scalability), infrastructure configuration and management, infrastructure as code tools, capacity planning, capacity \u0026amp; resource management, security check, service deployment, high availability (HA), data recovery, log/backup management, database management Monitor: service performance monitoring, log monitoring, end user experience, incident management What DevOps is NOT DevOps is NOT a tool:\nUnderstandably, this misconception arises from the fact that several tools are used in the DevOps practice. By itself, DevOps is not a tool or even a set of tools. While DevOps does rely heavily on tools to automate the process, it is much more than just that.\nDevOps is NOT a team:\nAnother common misconception while just beginning the DevOps transformation is creating a new team called the DevOps team. A different team is contrary to the principles of DevOps, which intend for the Dev and Ops teams to work more closely with each other. Setting up a new DevOps team is just going to create more silos rather than dissolve them.\nDevOps is NOT a role:\nRelated to the previous point and a rather rampant one, DevOps is technically not an individual role. Saying \u0026ldquo;DevOps Engineer \u0026rsquo;\u0026rsquo; is not justified unless the role single-handedly manages everything technical happening in the organization (an unimaginable thought).\nDevOps is NOT a standardized strategy:\nGiven that there are numerous ways to implement DevOps and an equal number of varied outcomes, a one-size-fits-all approach may not be the best way to address DevOps. Instead, various aspects, including requirements, business objectives, tech stack, and tools, need to be considered while developing a DevOps strategy for the organization.\nConclusion DevOps - Is a culture (methodology) that encompasses many aspects, solutions, and standards, and I believe that it will continue to evolve over the years, possibly changing and restructuring, but I believe that DevOps will remain relevant for many years to come.\nI hope you found this article informative and that I was able to provide some clarity on this topic. There is still much that could be said and explored about DevOps, but I have tried to focus on the main aspects that will spark your interest to further investigate this fascinating world of DevOps.\nI leave you with references to the sources where I obtained information and drew ideas from to create this article:\nLearn.Chef.Introduction-to-DevOps Atlassian.com.History-of-DevOps Gitlab.com.What-is-DevOps Microsoft.com.What-is-DevOps Thank you for reading, and I wish you success and good luck! ü§©\n","permalink":"https://vvmarchenko.github.io/techblog/posts/what-is-devops/","summary":"What is DevOps and what\u0026rsquo;s it all about?","title":"What is DevOps?"},{"content":"My name is Vladyslav Marchenko, and I‚Äôm an IT Engineer from Ukraineüá∫üá¶.\nMy passion for technology and desire to learn more led me to explore the world of DevOps. I‚Äôm currently studying and practicing Amazon Web Services (AWS) technologies such as ECS, EC2, S3, ASG, ALB, CloudFront, VPC etc. I also have experience managing configurations using Ansible, handling infrastructure with Terraform, creating modules, containerizing with Docker, working with networks, web servers, and Linux, and designing project architectures.\nI always seek new challenges and opportunities to learn and grow in my field.\nWhen I\u0026rsquo;m not diving into code or building infrastructure, I enjoy staying active with sports. For example, I enjoy boxingü•ä, fitnessüèãÔ∏è‚Äç‚ôÇÔ∏è, and snowboardingüèÇ.Additionally, I love sharing my insights and experiences with others through my blog.\nIf you want to learn more about my background and experience,\nplease check out my CV üëà\nIf you would like to contact me, please mail me at contact@techblog.pro.\nOr you can connect with me here: LinkedIn GitHub Telegram Stay tuned for more updates on my journey and insights on the latest in DevOps.\nThank you for reading!ü§©\n","permalink":"https://vvmarchenko.github.io/techblog/about/","summary":"My name is Vladyslav Marchenko, and I‚Äôm an IT Engineer from Ukraineüá∫üá¶.\nMy passion for technology and desire to learn more led me to explore the world of DevOps. I‚Äôm currently studying and practicing Amazon Web Services (AWS) technologies such as ECS, EC2, S3, ASG, ALB, CloudFront, VPC etc. I also have experience managing configurations using Ansible, handling infrastructure with Terraform, creating modules, containerizing with Docker, working with networks, web servers, and Linux, and designing project architectures.","title":"Hello readers!üëã"},{"content":"An IT Engineer with experience in technical support and IT administration, studying DevOps methodology, and in the future, I hope to become a master in this area.\nProfessional Experience IT Engineer üè¢ Qollabe, üóì Since Aug 2021\nBasic responsibilities: Administer employee and company resource access; Manage payments for all company resources, services, accounts and domains; Administer the Jira server; Writing Python scripts to automate processes in Jira; Provide employee support and troubleshoot websites issues; Administer external hostings and manage DNS records for all company websites; Acquiring domain names and participating in auctions to purchase them; Setting up and configuring Google Analytics. And this is just a tiny part of what I have to deal with in this position, but every time I am thrilled to receive new challenges and participate in solving complex tasks.\nTechnical Support Engineer üè¢ IPnet, üóì Feb\u0026#39;21 - Aug\u0026#39;21\nBasic responsibilities: Monitoring services and network status (D-Link, Tp-Link, ZyXEL, MikroTik, Cisco, Ubiquiti) and identifying issues with related departments; Escalating solutions for mass and complex problems; Providing remote technical support, processing requests, and advising subscribers by phone and email; Diagnosing malfunctions and assisting with subscriber equipment setup; Submitting requests for service connection, repair, and equipment configuration; Collaborating with related technical departments; Documenting actions. Challenges: Completed an internship in the NOC department, where I learned how to configure switches, routers, and debug networks. Skills Soft skills Excellent teamwork player Responsibility and punctuality Adaptability Time management Operating systems Linux MacOS Clouds AWS (ECS, EC2, S3, ASG, ALB, CloudFront, VPC etc.) GCP Techs skills Terraform, Ansible, Docker, Github Actions, Nginx,\nNetworking, Virtualization, Vagrant. Programming languages Python scripting Bash English B1 (Intermediate) Education: DevOps üè¢ Hillel IT School, üóì Nov\u0026#39;22 - Mar\u0026#39;23\nCCNA Cybersecurity Operations üè¢ SEDICOMM University, üóì Nov\u0026#39;20 - Mar\u0026#39;21\nIT Essentials: PC Hardware and Software üè¢ SEDICOMM University, üóì Aug\u0026#39;20 - Nov\u0026#39;20\nBachelor degree, Construction üè¢ Institute of Engineering, National University of Zaporizhzhia, üóì Sep\u0026#39;15 - Jun\u0026#39;19\nHobbies: Sports Fitness Boxing Basketball Ping-pong Blogging I have started a DevOps-themed blog Travel I love exploring new and interesting places, as well as adoring mountains, hiking, and snowboarding. ","permalink":"https://vvmarchenko.github.io/techblog/cv/","summary":"An IT Engineer with experience in technical support and IT administration, studying DevOps methodology, and in the future, I hope to become a master in this area.\nProfessional Experience IT Engineer üè¢ Qollabe, üóì Since Aug 2021\nBasic responsibilities: Administer employee and company resource access; Manage payments for all company resources, services, accounts and domains; Administer the Jira server; Writing Python scripts to automate processes in Jira; Provide employee support and troubleshoot websites issues; Administer external hostings and manage DNS records for all company websites; Acquiring domain names and participating in auctions to purchase them; Setting up and configuring Google Analytics.","title":"Vladyslav Marchenko"}]