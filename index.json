[{"content":"Introduction Linux Directory Structure\nLinux is a popular operating system known for it\u0026rsquo;s stability and flexibility. One key aspect to grasp is it\u0026rsquo;s directory structure. Unlike Windows, which uses drive letters, Linux organizes it\u0026rsquo;s files and folders in a tree-like structure. In this article, we\u0026rsquo;ll take a closer look at the Linux directory structure, with some practical examples.\nThe Root Directory (/) At the top of the Linux file system is the root directory, marked with a single forward slash (/). It\u0026rsquo;s like the starting point for everything in Linux. All other directories and files branch out from here, making it the core of the file system.\nKey Directories: /bin and /sbin: /bin stores essential system commands that are always available, even in emergencies. Think of these as the basic tools you need to keep the system running.\nSome examples of commands found in /bin include:\nls: Lists the contents of a directory cat: Displays the contents of a file cp: Copies files and directories mv: Moves files and directories rm: Deletes files and directories /sbin holds system commands used for system administration tasks. These are meant for use by the system administrator.\nSome examples of commands found in /sbin include:\nfdisk: Manages disk partitions mount: Mounts a filesystem umount: Unmounts a filesystem shutdown: Shuts down the system reboot: Reboots the system /etc: The /etc directory stores system-wide settings and configurations. For example, if you want to tweak network settings or user preferences, you\u0026rsquo;ll find the files here.\nSome examples of files found in /etc include:\nfstab: Specifies which file systems to mount at boot time hosts: Maps hostnames to IP addresses passwd: Stores user account information shadow: Stores encrypted user passwords /home: Each user gets their own folder within /home. For instance, if your username is \u0026ldquo;john,\u0026rdquo; your home directory is /home/john. This is where you keep your personal files and settings.\nSome examples of files and directories found in /home/john include:\n.bashrc: Contains configuration settings for the Bash shell Documents: Stores user documents Downloads: Stores downloaded files Music: Stores user music files Pictures: Stores user picture files /var: /var stores files that change during system operation. This includes logs, databases, and temporary files used by services like email.\nSome examples of files and directories found in /var include:\nlog: Stores system logs mail: Stores user email spool: Stores print jobs and other temporary files /tmp: The /tmp directory is a temporary storage area for files you need only briefly. For instance, when a web browser downloads a file, it may temporarily save it here.\n/usr: /usr is home to user-related programs, libraries, and documentation. It\u0026rsquo;s split into subdirectories like /usr/bin (for programs) and /usr/lib (for libraries).\nSome examples of files and directories found in /usr include:\n/usr/bin: Contains commonly used user programs, such as Firefox, Chrome, and LibreOffice /usr/lib: Contains shared libraries needed by user programs /usr/share: Contains documentation, fonts, and other resources used by user programs /lib: /lib holds crucial shared libraries needed for starting the system and running basic commands. These are essential for system functioning.\n/opt: /opt is a place for optional software packages. This is where you\u0026rsquo;d find third-party applications, keeping them separate from the core system.\nConclusion Understanding the Linux directory structure is fundamental when working with Linux. It helps you efficiently manage and locate files and directories, ensuring system stability and security. Each directory serves a specific purpose, making system administration and troubleshooting more straightforward. Whether you\u0026rsquo;re a beginner or an experienced user, knowing this structure is key to effectively using Linux.\n","permalink":"http://marchenko.blog/posts/linux_directory/","summary":"Understanding the Linux Directory Structure.","title":"Linux Directory"},{"content":"Introduction In today\u0026rsquo;s technology landscape, where containerization has become the norm for deploying applications, ensuring the security of sensitive data, such as passwords, API keys, and certificates, is crucial. Docker, one of the leading containerization platforms, provides a robust solution for managing sensitive information through a feature called Docker Secrets.\nIn this article, we will explore Docker Secrets and learn how to leverage its features to enhance the security of your containerized applications.\nUnderstanding Docker Secrets Docker Secrets is a built-in feature of Docker that allows you to securely store and manage sensitive information required by your applications.\nIt provides a mechanism to separate sensitive data from container images, making managing and controlling access to confidential information easier.\nCreating Docker Secrets To create a Docker Secret, you can use the docker secret create command, followed by the name and value of the secret.\nFor example, let\u0026rsquo;s create a secret called db_password with a value of mysecretpassword:\n$ echo \u0026#34;mysecretpassword\u0026#34; | docker secret create db_password - In the above example, we are using the pipe (|) to pass the value to the\ndocker secret create command.\nUsing Docker Secrets in Services Once you have created a Docker Secret, you can utilize it in your Docker services.You can specify the secrets in your service definition using the --secret flag.\nLet\u0026rsquo;s consider an example where we have a service called database that requires the db_password secret:\nversion: \u0026#39;3.7\u0026#39; services: database: image: mysql environment: - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db_password secrets: - db_password secrets: db_password: external: true In the above YAML file, we have defined the db_password secret as an external secret.\nThe MYSQL_ROOT_PASSWORD_FILE environment variable is set to /run/secrets/db_password, which is the location where Docker automatically mounts the secret into the container.\nManaging Docker Secrets Docker provides several commands to manage Docker Secrets. Here are a few commonly used commands:\ndocker secret ls: Lists all the secrets in your Docker Swarm. docker secret inspect \u0026lt;secret_name\u0026gt;: Displays detailed information about a specific secret. docker secret rm \u0026lt;secret_name\u0026gt;: Deletes a secret from Docker Swarm. Best Practices for Working with Docker Secrets Regularly rotate secrets: It is recommended to rotate your secrets periodically to minimize the impact of a potential compromise. Limit access to secrets: Only grant access to secrets to authorized individuals or services. Encrypt secrets at rest: Docker Secrets are stored on disk in an encrypted form. However, it is still advisable to use disk encryption for an extra layer of protection. Conclusion In this article, we have explored Docker Secrets, a powerful feature for managing sensitive data in Docker containers.\nBy utilizing Docker Secrets, you can enhance the security of your containerized applications and keep sensitive information separate from your container images. We have covered the creation, usage, and management of Docker Secrets, along with best practices to follow when working with secrets.\nBy following these practices, you can ensure the confidentiality and integrity of your sensitive data in a containerized environment.\nRemember, securing sensitive data is a critical aspect of building robust and secure applications, and Docker Secrets is an excellent tool in your arsenal to achieve that goal.\nHappy coding and secure containerization! üíª\n","permalink":"http://marchenko.blog/posts/docker_secrets/","summary":"Safeguard Your Sensitive Data with Docker Secrets.","title":"Docker Secrets"},{"content":"–í—Å—Ç—É–ø –°—å–æ–≥–æ–¥–Ω—ñ —è —Ö–æ—Ç—ñ–≤ –±–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑ –≤–∞–º–∏ —Ü—ñ–∫–∞–≤–æ—é —ñ –∫–æ—Ä–∏—Å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É envsubst.\n–Ø–∫—â–æ –≤–∏ –∫–æ–ª–∏-–Ω–µ–±—É–¥—å —Å—Ç–∏–∫–∞–ª–∏—Å—è –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—ñ –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, —Ç–æ, –º–æ–∂–ª–∏–≤–æ, –∑–Ω–∞–π–æ–º—ñ –∑ —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é. –ê–ª–µ —è–∫—â–æ –Ω—ñ, —Ç–æ —Ü—è —Å—Ç–∞—Ç—Ç—è –±—É–¥–µ –∫–æ—Ä–∏—Å–Ω–æ—é –¥–ª—è –≤–∞—Å! –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ, —â–æ —Ç–∞–∫–µ –∫–æ–º–∞–Ω–¥–∞ envsubst, —è–∫ —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ —è–∫—ñ —î —ó—ó –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.\n–¢–æ–∂, –ø–æ—á–Ω–µ–º–æ!üöÄ\n–©–æ —Ç–∞–∫–µ envsubst? –ö–æ–º–∞–Ω–¥–∞ envsubst —î —É—Ç–∏–ª—ñ—Ç–æ—é –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î –∑–∞–º—ñ–Ω—è—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —É —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª–∞—Ö.\n–í–æ–Ω–∞ –∑—á–∏—Ç—É—î –≤—Ö—ñ–¥–Ω–∏–π –ø–æ—Ç—ñ–∫ –¥–∞–Ω–∏—Ö, —à—É–∫–∞—î –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ ${VAR} —Ç–∞ –∑–∞–º—ñ–Ω—é—î —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑–º—ñ–Ω–Ω–∏—Ö, —è–∫—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏—Ö—ñ–¥–Ω–∏–π –ø–æ—Ç—ñ–∫.\n–ö–æ–º–∞–Ω–¥–∞ envsubst —î —á–∞—Å—Ç–∏–Ω–æ—é –ø–∞–∫–µ—Ç—É \u0026ldquo;gettext\u0026rdquo; —Ç–∞ –ø–æ—Å—Ç–∞—á–∞—î—Ç—å—Å—è –∑ –±—ñ–ª—å—à—ñ—Å—Ç—é –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ñ–≤ Linux.\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è envsubst –∑ —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Nginx –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ envsubst —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∑ —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Nginx.\n–ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –º–∏ –º–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–π–ª nginx.conf, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –∑–º—ñ–Ω–Ω—É $SERVER_NAME:\nserver { listen 80; server_name $SERVER_NAME; root /var/www/$SERVER_NAME; ... } –©–æ–± –∑–∞–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó $SERVER_NAME –∑ –æ—Ç–æ—á–µ–Ω–Ω—è, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É envsubst.\n–ü–µ—Ä—à –Ω—ñ–∂ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏, –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è $SERVER_NAME. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ example.com:\nexport SERVER_NAME=example.com –¢–µ–ø–µ—Ä, –∑–∞—Å—Ç–æ—Å—É—î–º–æ –∫–æ–º–∞–Ω–¥—É envsubst –¥–æ —Ñ–∞–π–ª—É nginx.conf:\nenvsubst \u0026lt; nginx.conf \u0026gt; nginx_generated.conf –Ø–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É –Ω–∞—Å –∑\u0026rsquo;—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–∏–π —Ñ–∞–π–ª nginx_generated.conf, –¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó $SERVER_NAME –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ example.com:\nserver { listen 80; server_name example.com; root /var/www/example.com; ... } –¶–µ–π –Ω–æ–≤–∏–π —Ñ–∞–π–ª nginx_generated.conf –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –∑–∞–º—ñ–Ω–µ–Ω—É –Ω–∞—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.\n–ô–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–ª—è –∑–∞–ø—É—Å–∫—É Nginx –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é.\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –û–¥–Ω—ñ—î—é –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–µ—Ä–µ–≤–∞–≥ envsubst —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ó—ó —É —Å—Ü–µ–Ω–∞—Ä—ñ—è—Ö –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–µ–¥–æ–≤–∏—â.\n–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–∞ —Å–≤–æ—î–º—É —Å–µ—Ä–≤–µ—Ä—ñ –∞–±–æ –≤ —Å–∏—Å—Ç–µ–º—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é, —Ç–∞–∫—ñ —è–∫ Kubernetes –∞–±–æ Docker Compose, —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ envsubst –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∑–∞–º—ñ–Ω–∏ —Ü–∏—Ö –∑–Ω–∞—á–µ–Ω—å —É –≤–∞—à–æ–º—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–º—É —Ñ–∞–π–ª—ñ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–∏.\n–¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ—é —ñ –ª–µ–≥–∫–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö, —â–æ —Å–ø—Ä–æ—â—É—î —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∞—à–∏–º–∏ –¥–æ–¥–∞—Ç–∫–∞–º–∏.\n–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è envsubst —É —Å—Ü–µ–Ω–∞—Ä—ñ—ó CI/CD –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É: –£ —Å—Ü–µ–Ω–∞—Ä—ñ—ó CI/CD –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ envsubst –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è ${IMAGE_TAG} —É —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª—É Task Definition AWS.\n–†–æ–∑–≥–ª—è–Ω–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å—Ü–µ–Ω–∞—Ä—ñ—é:\n- name: Deploy to ECS env: IMAGE_TAG: ${{ github.sha }} run: | envsubst \u0026lt; .github/templates/task_definition.template \u0026gt; task_definition.json aws ecs register-task-definition --cli-input-json file://task_definition.json –£ —Ü—å–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ö–µ—à–∞ –∫–æ–º–º—ñ—Ç—É GitHub —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è ${IMAGE_TAG}.\n–ü–æ—Ç—ñ–º –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ envsubst –¥–ª—è –∑–∞–º—ñ–Ω–∏ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è —É —à–∞–±–ª–æ–Ω—ñ \u0026ldquo;task_definition.template\u0026rdquo; —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–∞–π–ª task_definition.json. –ù–∞—Ä–µ—à—Ç—ñ, –º–∏ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è AWS –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ aws ecs register-task-definition.\n–ü–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π CI/CD –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ —É –º–æ—î–º—É GitHub.\n–ó–∞–∫–ª—é—á–µ–Ω–Ω—è: –ö–æ–º–∞–Ω–¥–∞ envsubst —î –ø–æ—Ç—É–∂–Ω–∏–º —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∑–∞–º—ñ–Ω–∏ –∑–Ω–∞—á–µ–Ω—å –∑–º—ñ–Ω–Ω–∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª–∞—Ö.\n–í–æ–Ω–∞ –ø–æ–ª–µ–≥—à—É—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—ñ–≤ —à–ª—è—Ö–æ–º –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –∑–∞–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö. –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é envsubst –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≥–Ω—É—á–∫—ñ —à–∞–±–ª–æ–Ω–∏ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏.\n–ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ envsubst –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –≤–∞—à–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É.\n–°–ø–æ–¥—ñ–≤–∞—é—Å—å, —â–æ —Ü—è —Å—Ç–∞—Ç—Ç—è –±—É–ª–∞ –∫–æ—Ä–∏—Å–Ω–æ—é –¥–ª—è –≤–∞—Å —ñ –Ω–∞–¥–∞–ª–∞ —á—ñ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É envsubst. –í–æ–Ω–∞ –≤–∞—Ä—Ç–∞ —É–≤–∞–≥–∏ —É—Å—ñ—Ö, —Ö—Ç–æ –ø—Ä–∞—Ü—é—î –∑ Linux-—Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º —Ç–∞ —à—É–∫–∞—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π –∑ –∑–º—ñ–Ω–Ω–∏–º–∏ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ.\n","permalink":"http://marchenko.blog/posts/envsubst/","summary":"–ö–æ–º–∞–Ω–¥–∞ Linux \u0026rsquo;envsubst\u0026rsquo;, –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –ø—Ä–æ–¥–∞–∫—à–Ω.","title":"ENVSUBST: —Å–ø—Ä–æ—â–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–º—ñ–Ω–Ω–∏–º–∏ –æ—Ç–æ—á–µ–Ω–Ω—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ"},{"content":"Introduction Hello everyone!üëã I\u0026rsquo;m pleased to have your attention! Every day, as I delve deeper into the DevOps methodology, I see more and more discrepancies and misunderstandings about what DevOps is and why it is needed.\nIn this article, I will try to share the information that I have learned and found about this issue, and I hope it will be helpful to you.\nSo let\u0026rsquo;s get started!üöÄ\nHistory of DevOps To answer the question \u0026ldquo;What is DevOps?\u0026rdquo;, let\u0026rsquo;s first understand where this methodology came from: The DevOps methodology started to coalesce sometime between 2007 and 2008, when IT operations and software development communities raised concerns what they felt was a fatal level of dysfunction in the industry.\nThey railed against the traditional software development model, which called for those who write code to be organizationally and functionally apart from those who deploy and support that code.\nAt this very moment, by fortunate circumstances, Patrick Debois appears. Patrick Debois first suggested the DevOps philosophy in 2007. When consulting as a project manager for the Belgian government ministry\u0026rsquo;s task of data center migrations. Patrick was visibly frustrated with the \u0026ldquo;walls of separation\u0026rdquo; and lack of collaboration between the application development teams and infrastructure teams.\nIn 2008, Patrick learned about the \u0026ldquo;Agile Infrastructure\u0026rdquo; session hosted by Andrew Schafer at the Agile Conference in Toronto. Unfortunately, given the negative predilection around the topic, Patrick was the only one at the session. Nevertheless, they both shared their ideas and seemed to hit it off instantly. They then discussed \u0026ldquo;Agile Systems Administration\u0026rdquo; on an online forum. The idea was met with lackluster interest.\nIn an unrelated turn of events, this idea resurfaced at the 2009 O\u0026rsquo;Reilly Velocity Conference when two Flickr employees - John Allspaw and Paul Hammond, gave the fabulous presentation titled, \u0026ldquo;10+ Deploys per Day: Dev and Ops Cooperation at Flickr.\u0026rdquo; Allspaw and Hammond role-played conversations between members of development and operations teams during a standard software deployment cycle. In addition, they offered dramatic representation to the finger-pointing that goes along, including \u0026ldquo;It\u0026rsquo;s not my code, it\u0026rsquo;s your machines!\u0026rdquo;\nWhile Patrick Debois wasn\u0026rsquo;t at the presentation, he watched the recording. And given the sudden buzz on social media went on to coin the term \u0026ldquo;DevOps\u0026rdquo; in the year 2009.\nSo what is DevOps? At its core, DevOps is a culture that emphasizes the need for collaboration and communication between software development teams and IT operations.\nThe primary goal of DevOps is to enable organizations to deliver software products and services quickly, reliably, and at scale. It involves a combination of tools, practices, and cultural changes to achieve this goal.\nThe goals of DevOps: Fast Development Methodologies Fast Quality Assurance Methodologies Fast Deployment Methodologies Faster time to market Iteration \u0026amp; Continuous Feedback (strong and continuous communication between stakeholders ‚Äî the end users and customers, product owners, development, quality assurance, and production engineers) The benefits of DevOps: Environment Stabilization (enforces consistency, increase up-time) Shorter Development Cycle (manage requirements and code-repository) Increased Release Velocity (continuous build, push-button deployments) Reduced Defects (regiment processes, automated testing) Process Metrics (track both time at each stage, and the errors and exceptions) Also, I cannot overlook one of the most important practices in DevOps, which is Continuous Integration and Continuous Delivery (CI/CD).\nContinuous integration and continuous delivery (CI/CD) Continuous Integration (CI) is the practice used by development teams to automate, merge, and test code. CI helps to catch bugs early in the development cycle, which makes them less expensive to fix. Automated tests execute as part of the CI process to ensure quality. CI systems produce artifacts and feed them to release processes to drive frequent deployments.\nContinuous Delivery (CD) is a process by which code is built, tested, and deployed to one or more test and production environments. Deploying and testing in multiple environments increases quality. CD systems produce deployable artifacts, including infrastructure and apps. Automated release processes consume these artifacts to release new versions and fixes to existing systems. Systems that monitor and send alerts run continually to drive visibility into the entire CD process.\nBased on the above, I can identify the main steps in DevOps:\nThe Steps of DevOps: Plan: task management, schedules Code: code development and code review, source code management Build: continuous integration tools, version control tools, build status Test: continuous testing tools that provide feedback on business risks, determine performance Package: artifact repository, application pre-deployment staging Release: change management, release approvals, release automation Operate: infrastructure installation, infrastructure changes (scalability), infrastructure configuration and management, infrastructure as code tools, capacity planning, capacity \u0026amp; resource management, security check, service deployment, high availability (HA), data recovery, log/backup management, database management Monitor: service performance monitoring, log monitoring, end user experience, incident management What DevOps is NOT DevOps is NOT a tool:\nUnderstandably, this misconception arises from the fact that several tools are used in the DevOps practice. By itself, DevOps is not a tool or even a set of tools. While DevOps does rely heavily on tools to automate the process, it is much more than just that.\nDevOps is NOT a team:\nAnother common misconception while just beginning the DevOps transformation is creating a new team called the DevOps team. A different team is contrary to the principles of DevOps, which intend for the Dev and Ops teams to work more closely with each other. Setting up a new DevOps team is just going to create more silos rather than dissolve them.\nDevOps is NOT a role:\nRelated to the previous point and a rather rampant one, DevOps is technically not an individual role. Saying \u0026ldquo;DevOps Engineer \u0026rsquo;\u0026rsquo; is not justified unless the role single-handedly manages everything technical happening in the organization (an unimaginable thought).\nDevOps is NOT a standardized strategy:\nGiven that there are numerous ways to implement DevOps and an equal number of varied outcomes, a one-size-fits-all approach may not be the best way to address DevOps. Instead, various aspects, including requirements, business objectives, tech stack, and tools, need to be considered while developing a DevOps strategy for the organization.\nConclusion DevOps - Is a culture (methodology) that encompasses many aspects, solutions, and standards, and I believe that it will continue to evolve over the years, possibly changing and restructuring, but I believe that DevOps will remain relevant for many years to come.\nI hope you found this article informative and that I was able to provide some clarity on this topic. There is still much that could be said and explored about DevOps, but I have tried to focus on the main aspects that will spark your interest to further investigate this fascinating world of DevOps.\nI leave you with references to the sources where I obtained information and drew ideas from to create this article:\nLearn.Chef.Introduction-to-DevOps Atlassian.com.History-of-DevOps Gitlab.com.What-is-DevOps Microsoft.com.What-is-DevOps Thank you for reading, and I wish you success and good luck! üòå\n","permalink":"http://marchenko.blog/posts/what-is-devops/","summary":"What is DevOps and what\u0026rsquo;s it all about?","title":"What is DevOps?"},{"content":"My name is Vladyslav Marchenko, and I‚Äôm an IT Engineer from Ukraineüá∫üá¶.\nMy passion for technology and desire to learn more led me to explore the world of DevOps. I‚Äôm currently studying and practicing Amazon Web Services (AWS) technologies such as ECS, EC2, S3, ASG, ALB, CloudFront, VPC etc. I also have experience managing configurations using Ansible, handling infrastructure with Terraform, creating modules, containerizing with Docker, working with networks, web servers, and Linux, and designing project architectures.\nI always seek new challenges and opportunities to learn and grow in my field.\nWhen I\u0026rsquo;m not diving into code or building infrastructure, I enjoy staying active with sports. For example, I enjoy boxingü•ä, fitnessüèãÔ∏è‚Äç‚ôÇÔ∏è, and snowboardingüèÇ.Additionally, I love sharing my insights and experiences with others through my blog.\nIf you want to learn more about my background and experience,\nplease check out my CV üëà\nIf you would like to contact me, please mail me at contact@techblog.pro.\nOr you can connect with me here: LinkedIn GitHub Telegram Stay tuned for more updates on my journey and insights on the latest in DevOps.\nThank you for reading!ü§©\n","permalink":"http://marchenko.blog/about/","summary":"My name is Vladyslav Marchenko, and I‚Äôm an IT Engineer from Ukraineüá∫üá¶.\nMy passion for technology and desire to learn more led me to explore the world of DevOps. I‚Äôm currently studying and practicing Amazon Web Services (AWS) technologies such as ECS, EC2, S3, ASG, ALB, CloudFront, VPC etc. I also have experience managing configurations using Ansible, handling infrastructure with Terraform, creating modules, containerizing with Docker, working with networks, web servers, and Linux, and designing project architectures.","title":"Hello readers!üëã"},{"content":"An IT Engineer with experience in technical support and IT administration, studying DevOps methodology, and in the future, I hope to become a master in this area.\nProfessional Experience Senior Support Engineer üè¢ Qollabe, üóì Since Aug 2021\nBasic responsibilities: Administration of employee and company resource access; Administration of Jira server, creating automatization workflow; Writing Bash / Python scripts to automate routine processes; Administration of external hostings and managing DNS records for all company websites; Providing employee support and troubleshoot websites issues; Setting up DNS zones in Cloudflare; Collaboration with the DevOps team to build and optimize processes in the company; And this is just a tiny part of what I have to deal with in this position, but every time I am thrilled to receive new challenges and participate in solving complex tasks.\nTechnical Support Engineer üè¢ IPnet, üóì Feb\u0026#39;21 - Aug\u0026#39;21\nBasic responsibilities: Monitoring services and network status, identifying issues with related departments; Providing remote technical support, processing requests, and advising subscribers by phone and email; Diagnosing malfunctions and assisting with subscriber equipment setup (D-Link, Tp-Link, ZyXEL, MikroTik, TV-BOX); Submitting requests for service connection, repair, and equipment configuration; Documenting actions. Challenges: Completed an internship in the NOC department, where I learned how to configure switches, routers, and debug networks. Skills Soft skills Excellent teamwork player Responsibility and punctuality Adaptability Time management Operating systems Linux MacOS Clouds AWS GCP Techs skills Terraform, Ansible, Docker, Github Actions, Nginx,\nNetworking, Virtualization, Vagrant. Programming languages Python scripting Bash English B1 (Intermediate) Education: DevOps üè¢ Hillel IT School, üóì Nov\u0026#39;22 - Mar\u0026#39;23\nCCNA Cybersecurity Operations üè¢ SEDICOMM University, üóì Nov\u0026#39;20 - Mar\u0026#39;21\nIT Essentials: PC Hardware and Software üè¢ SEDICOMM University, üóì Aug\u0026#39;20 - Nov\u0026#39;20\nBachelor degree, Construction üè¢ Institute of Engineering, National University of Zaporizhzhia, üóì Sep\u0026#39;15 - Jun\u0026#39;19\nHobbies: Sports Fitness Boxing Basketball Ping-pong Blogging I have started a DevOps-themed blog Travel I love exploring new and interesting places, as well as adoring mountains, hiking, and snowboarding. ","permalink":"http://marchenko.blog/cv/","summary":"An IT Engineer with experience in technical support and IT administration, studying DevOps methodology, and in the future, I hope to become a master in this area.\nProfessional Experience Senior Support Engineer üè¢ Qollabe, üóì Since Aug 2021\nBasic responsibilities: Administration of employee and company resource access; Administration of Jira server, creating automatization workflow; Writing Bash / Python scripts to automate routine processes; Administration of external hostings and managing DNS records for all company websites; Providing employee support and troubleshoot websites issues; Setting up DNS zones in Cloudflare; Collaboration with the DevOps team to build and optimize processes in the company; And this is just a tiny part of what I have to deal with in this position, but every time I am thrilled to receive new challenges and participate in solving complex tasks.","title":"Vladyslav Marchenko"}]